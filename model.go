package oauth

import (
	"time"
)

type TokenType string

const (
	BearerToken TokenType = "Bearer"
	AuthToken   TokenType = "A"
	UserToken   TokenType = "U"
	ClientToken TokenType = "C"
)

type Claims map[string]interface{}
type Properties map[string]string

// TokenResponse is the authorization server response
type TokenResponse struct {
	Token                 string     `json:"access_token"`
	RefreshToken          string     `json:"refresh_token"`
	TokenType             TokenType  `json:"token_type"`               // bearer
	ExpiresIn             int64      `json:"expires_in"`               // secs
	RefreshTokenExpiresIn int64      `json:"refresh_token_expires_in"` // secs
	Properties            Properties `json:"properties"`
}

// ExpirableToken is an interface for a token that has an expiration.
type ExpirableToken interface {
	IsExpired() bool
}

// Token structure generated by the authorization server
type Token struct {
	ID           string        `json:"token_id"`
	CreationDate time.Time     `json:"date"`
	ExpiresIn    time.Duration `json:"expires_in"` // secs
	Credential   string        `json:"credential"`
	TokenType    TokenType     `json:"type"`
	Scope        string        `json:"scope"`
	Claims       Claims        `json:"claims"`
}

// IsExpired checks the creation date to the expiry, if it's greater than 0, and returns true if the token is expired.
func (t *Token) IsExpired() bool {
	return t.ExpiresIn > 0 && time.Now().UTC().After(t.CreationDate.Add(t.ExpiresIn))
}

// RefreshToken structure included in the authorization server response
type RefreshToken struct {
	ID           string        `json:"refresh_token_id"`
	TokenID      string        `json:"token_id"`
	CreationDate time.Time     `json:"date"`
	ExpiresIn    time.Duration `json:"expires_in"` // secs
	Credential   string        `json:"credential"`
	TokenType    TokenType     `json:"type"`
	Scope        string        `json:"scope"`
	Claims       Claims        `json:"claims"`
}

// IsExpired checks the creation date to the expiry, if it's greater than 0, and returns true if the token is expired.
func (t *RefreshToken) IsExpired() bool {
	return t.ExpiresIn > 0 && time.Now().UTC().After(t.CreationDate.Add(t.ExpiresIn))
}
